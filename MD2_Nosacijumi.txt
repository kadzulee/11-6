Nosacījumi:
===
1. Darbu izstrādā vai nu individuāli, vai grupās līdz 2(!) cilvēkiem iepriekš piesakot to, vai nu mutiski, vai caur e-klasi (jāizdara pirms darba nodošanas).
1.1. Grupu darba gadījumā jāiesniedz darbs abiem, pierakstot, ka ir strādājis kopā ar noteiktu cilvēku.
1.2. Ja vienu darbu iesniegs vairāki cilvēki (ja strādā individuāli), vai vairāk par diviem cilvēkiem (ja strādā grupā) - visiem iesaistītajiem tiks izlikta atzīme 1.
2. Jāizdomā kāda reālistiska tēma, kurā savstarpēji notiek mijiedarbība starp dažādiem objektiem. Jāizdomā kāda darbība, kura jāveic jūsu programmai. Praktiski - simulācija kādai darbībai vidē.
2.1. Piemērs ir restorāns, kuru apskatījām klasē, un kas ir pieejama https://github.com/idmelkis/11-6/tree/master/klasupiemers-restorans. 
2.1.1. Šajā gadījumā tēma ir restorāns.
2.1.2. Darbība, kas ir jāveic - Klientam ir pieejama noteikta naudas summa, klients nopērk ēdienu. Restorāns aprēķina izmaksas pasūtījumam.
2.1.3. Jāpiemin, ka restorāna tēma vairs nav pieejama.
3. Jāizstrādā klašu diagramma līdzīgu piemēram, kas ir pieejams https://github.com/idmelkis/11-6/blob/master/klasupiemers-restorans/KlasuDiagrammaRestorans.drawio.
   Lai atvērtu diagrammu, saglabājat šo failu (poga "Raw" -> pogas ctrl+s) un atverat viņu https://app.diagrams.net/
3.1. Klašu diagrammā jāattēlo visi iesaistītie objekti (klases)
3.1.1. Restorāna gadījumā tas bija pats restorāns, darbinieki, klients, ēdiens, tā sastāvdaļas.
3.2. Klašu diagrammā jāattēlo visi mainīgie kas ir saistīti ar šīm klasēm. Šiem mainīgajiem vajag norādīt arī datu tipu (int - skaitlis, float - daļskaitlis, list - saraksts (masīvs), dict - vārdnīca, bool - True/False...).
3.2.1. Restorāna gadījumā - sastāvdaļām bija cena, ēdienam bija sastāvdaļas, klientiem tā bija pieejamā nauda, pasūtījumā bija ēdienu saraksts utt.
3.2.2. Nav obligāti, ka katrai klasei ir funkcija UN kāds mainīgais (tas it īpaši attiecas uz mantotām klasēm), bet ir jābūt vismaz vienam no tiem.
3.3. Klašu diagrammā jāattēlo visas funkcijas, kas ir saistītas ar šīm klasēm. Šiem mainīgajiem vajag norādīt arī parametrus, to datu tipus, un atgriezto datu tipu.
3.3.1. Restorāna gadījumā - iegūt ēdiena cenu saskaitot sastāvdaļu cenas, darbinieku kop. algu saskaitot visu darbinieku algas utt.
3.4. Klašu diagrammā vajag būt vismaz 10 klasēm (strādājot grupā - 12)
3.5. Klašu diagrammā vajag būt vismaz 2 mantotām klasēm (šīs klases ir iekļautas 10 klašu prasībā, t.i., var būt 8 unikālas klases, un 2 mantotas). Mantotām klasēm jānorāda bāzes klases nosaukums. Strādājot grupā vajag būt 3 mantotām klasēm.
3.6. Klašu diagrammā klasēm vajag būt savienotām ar līnijām, lai var redzēt, kas ir savienots ar ko.
4. Jāizstrādā programma, kas seko klašu diagrammai
4.1. Programmā ir jāimplementē visas klases, kas ir jūsu klašu diagrammā
4.2. Programmā ir jāimplementē jūsu izvēlētā darbība
4.2.1. Restorāna gadījumā šī darbība bija pirkuma veikšana, cenas aprēķināšana, un pārbaude vai klients to var vispār atļauties
4.3. Vismaz vienai mantotai klasei vajadzētu pārrakstīt vai nu mainīgo, vai funkciju, no bāzes klases 4.3.1. Restorāna piemērā – viesmīļa CalculateSalary funkcija pārraksta galvenās klases CalculateSalary funkciju.
5. Piezīme - piemērā dažas klases nav saistītas ar funkcionalitāti (piemēram algas) - tās ir tikai, lai demonstrētu kā klasēs tas viss izskatās. Jūsu darbos cenšaties izveidot klases tā, lai visas klases iesaistītas jūsu izvēlētās darbības izpildē.


Vērtēšana:
===
1. Klašu diagramma - 4 balles 
1.1. Tiks pārbaudīts, vai atbilst prasībām - vai ir pietiekams klašu skaits, vai ir mantotas klases, vai klases ir savienotas, un klasēm ir vismaz viena funkcija VAI viens mainīgais.
1.2. Daži dizaini ir labāki par citiem, bet šī darba mērķis nav noskaidrot, cik labi jūs mākat sadalīt situācijas mazākās daļās, bet gan cik labi jūs saprotat klašu konceptu un kā to pielietot. Tādēļ nevērtēšu tēmas izvēli, un to, cik reālistiska, ir jūsu ideja.
2. Programma – 6 balles
2.1. Programmai ir jākompilējas un jāstrādā
2.2. Tiks pārbaudīts:
2.2.1. Vai programma atbilst grafikam (ir klases, mainīgie, mantošana)
2.2.2. Vai jūsu programmā mantotā klasē pārraksta kādu mainīgo vai funkciju 
2.2.3. Vai esat definējuši objektus no klasēm
2.2.4. Vai esat implementējuši savu definēto darbību
2.2.5. Papildu punkti, kas var pavilkt atzīmi uz augšu, bet nav obligāti (jo šīs funkcionalitātes lietojums ir diezgan situacionāla) – 
2.2.5.1. __init__ funkcija, ar vairākiem argumentiem
2.2.5.2. Vairāki klašu konstruktori (stundā netika apskatīti, internetā informāciju var atrast meklējot ‘classmethod’), 
2.2.5.3. super() funkcijas pielietojums mantotajās klasēs, pieņemot, ka šīs funkcijas rezultāts kaut kā ir izmantots, vai papildināts.
2.2.5.3. Mainīgajiem un funkcijām ir pierakstīti datu tipi. Jūsu darbos tie nav obligāti.
3. Es neskatīšos uz koda stilu (manos piemēros klašu mainīgie sākas ar apakšsvītru, funkciju nosaukimi ir ar lielo burtu, bet to parametri- ar mazo).

Kopā: 10b
kods:
class Slimnica:
    darbinieki: 'list[Darbinieks]'
    telpa = 'Telpa'
    def __init__ (self, telpa:'Telpa') -> None:
        self.darbinieki = []
        self.telpa = telpa
    def AprekinamAlgas(self) -> float:
        alga = 0.0
        for darbinieks in self.darbinieki:
            alga += darbinieks.IzvadamAlgu()
        return alga
    def PirktProceduru(self,klients:'Klients', procedura: 'list[arstesana]') -> 'Pieraksts':
        for darbinieks in self.darbinieki:
            if type(darbinieks) is Medmasa:
                if not darbinieks.kaduApskata:
                    medmasa = darbinieks
                    break
        if 'medmasa' not in locals():
            print('Kluda - nav pieejamas medmasas!')
        else:
            medmasa.kaduApkalpo = True
            return Pieraksts(klients, procedura, medmasa, self.telpa)
class Darbinieks:
    alga: float = 100.0
    def __init__(self) -> None:
        pass
    def IzvadamAlgu(self) -> float:
        self.alga
class Arsts(Darbinieks):
    alga: float = 400.0
    def __init__(self) -> None:
            pass
class Medmasa(Darbinieks):
    papildstunduAlga: float = 10.0
    alga: float = 200.0
    kaduApskata: bool = False
    def __init__(self) -> None:
        super().__init__()  
    def IzvadamAlgu(self) -> float:
        return super().IzvadamAlgu()+self.papildstunduAlga
class Prieksmets:
    izmaksas: float = 0.0
    nosaukums: str
class Zales:
    izmaksas: float = 0.0
    nosaukums: str
class Arstesana:
    prieksmeti: 'list[Prieksmets]'
    instrukcija: 'list[str]'
    zales: 'list[Zales]'
    def __init__(self) -> None:
        self.prieksmeti = []
        self.instrukcija = []
        self.zales = []
    def Aprekinamizmaksas(self) -> float:
        kopIzmaksas = 0.0
        for prieksmets in self.prieksmeti:
            kopIzmaksas += prieksmets.izmaksas
        for zales in self.zales:
            kopIzmaksas += zales.izmaksas
        return kopIzmaksas

class Procedura:
    prieksmeti: 'list[Prieksmets]'
    zales: 'list[Zales]'
    def __init__(self) -> None:
        self.prieksmeti = []
        self.zales = []
    def AprekinamIzmaksas(self) -> float:
        kopIzmaksas = 0.0
        for prieksmets in self.prieksmeti:
            kopIzmaksas += prieksmets.izmaksas
        for zales in self.zales:
            kopIzmaksas += zales.izmaksas
        return kopIzmaksas
class Klients:
    pieejamaNauda: float = 0.0
class Pieraksts:
    klients: Klients
    arstesana: 'list[Arstesana]'
    medmasa: Medmasa
    telpa: 'Telpa'
    def __init__(self,klients: Klients, arstesana: 'list[Arstesana]', medmasa: Medmasa, telpa: 'Telpa' ) -> None:
        self.klients = klients
        self.arstesana = arstesana
        self.medmasa = medmasa
        self.telpa = telpa
    def AprekinamIzmaksas(self) -> float:
        kopIzmaksas = 0.0
        for arstesana in self.arstesana:
            kopIzmaksas += arstesana.Aprekinamizmaksas()
        return kopIzmaksas
    def Izpildam(self) -> float:
        izmaksas = self.AprekinamIzmaksas()
        if self.klients.pieejamaNauda < izmaksas:
            print('Klientam nav pietiekami lidzekli, lai iegadatos proceduru')
        else:
            self.klients.pieejamaNauda -= izmaksas
        return self.telpa.Arstet(self.arstesana)
class Telpa:
    prieksmeti: 'dict[Prieksmets, int]'
    def __init__(self) -> None:
        self.prieksmeti = {}
    def Arstet(self, procedura: 'list[Arstesana]') -> 'list[Procedura]':
        sagatavotaProcedura = []
        for arstesana in procedura:
            for prieksmeti in arstesana.prieksmeti:
                if self.prieksmeti[prieksmeti] < 1:
                    print('nepietiek prieksmetu, lai veiktu proceduru')
            for prieksmeti in arstesana.prieksmeti:
                self.prieksmeti[prieksmeti] -= 1
            sagProcedura = Procedura()
            sagProcedura.prieksmeti = arstesana.prieksmeti
            sagatavotaProcedura.append(sagProcedura)
        return sagatavotaProcedura
class IzrakstitaRecepte(Arstesana):
    zales: 'dict[Zales, int]'
    def __init__(self) -> None:
       self.zales = {}
    def Izrakstit(self, procedura: 'list[Arstesana]') -> 'list[Procedura]':
        gatavasZales = []
        for asrtesana in procedura:
            for zales in asrtesana.zales:
                if self.zales[zales] < 1:
                    print('nepietiek zalu, lai tas izrakstitu!')
            for zales in asrtesana.zales:
                    self.zales[zales] -= 1
            gatZales = Zales()
            gatZales.zales = asrtesana.zales
            gatavasZales.append(gatZales)
        return gatavasZales
class Aptieka:
    izrakstitarecepte: 'list[IzrakstitaRecepte, int]'
    def __init__(self) -> None:
        self.izrakstitarecepte = []
        self.zales = []
    def AprekinamIzmaksas(self) -> float:
        kopIzmaksas = 0.0
        for zales in self.zales:
            kopIzmaksas += zales.izmaksas
        return kopIzmaksas

plaksteri = Prieksmets()
plaksteri.izmaksas = 0.25
plaksteri.nosaukums = 'Plāksteri'
ledus = Prieksmets()
ledus.izmaksas = 0.1
ledus.nosaukums = 'Ledus'
telpa = Telpa()
telpa.prieksmeti[plaksteri] = 5
telpa.prieksmeti[ledus] = 6

ibumetin = Zales()
ibumetin.izmaksas = 10
ibumetin.nosaukums = 'Ibumetin'
aptieka = IzrakstitaRecepte()
aptieka.zales[ibumetin] = 6


Karlis = Arsts()
Anna = Medmasa()
slimnica = Slimnica(telpa)
slimnica.darbinieki.append(Karlis)
slimnica.darbinieki.append(Anna)
Anna.papildstunduAlga = 100

arstesana = Arstesana()
arstesana.prieksmeti.append(plaksteri)
arstesana.prieksmeti.append(ledus)
arstesana.instrukcija.append('uzlikt ledu, plāksteri un izrkastīt zāles')
arstesana.zales.append(ibumetin)

klients = Klients()
klients.pieejamaNauda = 300.0

pieraksts = slimnica.PirktProceduru(klients, [arstesana])
procedura = pieraksts.Izpildam()
print(f"Klients pasūtīja {len(procedura)} procedūru. Klientam pāri palika {klients.pieejamaNauda}!")
for prieksmeti in slimnica.telpa.prieksmeti:
    print(f"Palika prieksmeti{prieksmeti.nosaukums}: {slimnica.telpa.prieksmeti[prieksmeti]}")
for zales in aptieka.zales:
    print(f"Palika zāles {zales.nosaukums}: {aptieka.zales[zales]-1}")


